# PHP CircleCI 2.0 configuration file
#
# Check https://circleci.com/docs/2.0/language-php/ for more details
#
version: 2
jobs:
  build:
    docker:
      # Specify the version you desire here
      - image: circleci/php:7.1-node-browsers
      - image: circleci/mysql:5.7
    environment:
      MYSQL_DATABASE: pogi_test
      MYSQL_USER: root
      MYSQL_ALLOW_EMPTY_PASSWORD: 1
    command:
        mysqld --sql-mode=NO_ENGINE_SUBSTITUTION --character-set-server=utf8mb4 --collation-server=utf8mb4_bin --innodb-large-prefix=true


      # Specify service dependencies here if necessary
      # CircleCI maintains a library of pre-built images
      # documented at https://circleci.com/docs/2.0/circleci-images/
      # Using the RAM variation mitigates I/O contention
      # for database intensive operations.
      # - image: circleci/mysql:5.7-ram
      #
      # - image: redis:2.8.19
    working_directory: ~/pogi

    steps:
      - checkout

      - run: sudo apt-get update
      - run: sudo apt-get install -y libpng-dev libmcrypt-dev libreadline-dev mysql-client zip zlib1g-dev
      - run: sudo docker-php-ext-install zip
      - run: sudo docker-php-ext-install gd
      - run: sudo apt-get install
      - run: sudo docker-php-ext-install pdo_mysql && sudo docker-php-ext-enable pdo_mysql
      - run: sudo docker-php-ext-configure intl
      - run: sudo docker-php-ext-install intl

      - restore_cache:
          keys:
          - v1-dependencies-{{ checksum "composer.json" }}
          # fallback to using the latest cache if no exact match is found
          - v1-dependencies-
      - run:
          name: Install Dependencies
          command: composer install -n --prefer-dist
      - save_cache:
          paths:
            - ./vendor
          key: v1-dependencies-{{ checksum "composer.json" }}
      - run:
          name: Configure secondary database for Analytics
          command: mysql -h 127.0.0.1 -u root -e "CREATE DATABASE pogi_analytics_test"
      - run:
          name: Initialize Dev Environment
          command: ./init --env=Circle-CI --overwrite=All
      - run:
          name: Install DB Migrations
          command: ./yii_test migrate --interactive=0
      - run:
          name: Run Codeception tests and store result output
          command: cd ./admin && ../vendor/bin/codecept run --debug --xml --html --fail-fast
      #- store_test_results:
  #    path: /tmp

  #- store_artifacts:
  #    path: /tmp/report.html
  #    destination: report 


      